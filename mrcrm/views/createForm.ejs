<!DOCTYPE html>
<html>

<head>
  <%- include('./header.ejs') %>
    <title>
      <%= (creation==false ? (typeof(title)=="undefined" ? "Create new form" : title) : "Create new form" ) %>
    </title>
</head>

<body>
  <%- include('./navbar.ejs') %>
    <div id="main">
      <div class="container">
        <h1 class="title">
          <%= (creation==false ? "Update preview" : "Preview" ) %>
        </h1>
        <input type="text" id="formTitle" value="<%= (creation==false ? title : "") %>" placeholder="Title">
        <div id="preview">

        </div>
        <select id="questSelect"></select>
        <button onclick="addQuestToPreview()">Add</button>
        <% if(creation==true) { %>
          <button onclick="createForm()">Create</button>
          <% } else { %>
            <button onclick="updateForm()">Update</button>
            <% } %>
              <button onclick="clearPreview()">Clear</button>
      </div>
      <div class="container" id="construct">
        <h1 class="title">Construct form</h1>
        <div id="quests">

        </div>
        <select id="fieldSelect">

        </select>
        <select id="typeSelect">
          <option value="text">Text</option>
          <option value="yorn">Yes or No</option>
          <option value="file">File</option>
        </select>
        <button onclick="addQuest(event)">Add Question</button>
      </div>
      <div class="container" id="addfield">
        <h1 class="title">Add field</h1>
        <div id="fields">

        </div>
        <input id="newField" type="text"><button onclick="addField(event)">Add Field</button>
      </div>
    </div>
    <script src="/javascripts/base.js"></script>
    <script>
      const creation = "<%=creation%>"
      const formId = "<%= (typeof(formId) != 'undefined' ? formId : '') %>"

      function updateQuest(e) {
        const sender = e.srcElement || e.target;
        const id = sender.parentNode.id;
        const fieldId = sender.parentNode.getElementsByTagName("select")[0].value
        const type = sender.parentNode.getElementsByTagName("select")[1].value
        getAjax("/report/update/quests/" + id + "?fieldId=" + fieldId + "&type=" + type, (r) => { refreshConstructContainer() });
      }
      function deleteQuest(e) {
        const sender = e.srcElement || e.target;
        const id = sender.parentNode.id;
        getAjax("/report/delete/quests/" + id, (r) => {
          refreshConstructContainer()
        });
      }
      function deleteField(e) {
        const sender = e.srcElement || e.target;
        const id = sender.parentNode.id;
        getAjax("/report/delete/fields/" + id, (r) => {
          //sender.parentNode.parentNode.removeChild(sender.parentNode)
          refreshAddFieldContainer()
        });
      }
      function updateField(e) {
        const sender = e.srcElement || e.target;
        const id = sender.parentNode.id;
        const text = sender.parentNode.getElementsByTagName("input")[0]
        getAjax("/report/update/fields/" + id + "?field=" + text.value, (r) => { refreshAddFieldContainer() });
      }
      function addQuest(event) {
        let fieldId = document.getElementById("fieldSelect").value;
        let type = document.getElementById("typeSelect").value;
        if (fieldId == "") return;
        getAjax("/report/add/quest?fieldId=" + fieldId + "&type=" + type, (res) => {
          refreshConstructContainer(false);
        })
      }
      function addField(event) {
        let input = document.getElementById("newField");
        const text = input.value;
        getAjax("/report/add/fields?field=" + text, (r) => {
          /*const json = JSON.parse(r);
          document.getElementById("fields").appendChild(createField(json.id, text)); */
          refreshAddFieldContainer(false)
          input.value = "";
        })
      }
      const createQuest = (id, text, type) => {
        let quest = document.createElement("div");
        quest.classList.add("quest");
        quest.id = id;
        let select = document.getElementById("fieldSelect").cloneNode(true);
        select.id = "";
        let typeselect = document.getElementById("typeSelect").cloneNode(true);
        typeselect.id = "";
        for (let i = 0; i < select.options.length; i++) {
          if (select.options[i].innerText == text) {
            select.selectedIndex = i;
            break;
          }
        }
        for (let i = 0; i < typeselect.options.length; i++) {
          if (typeselect.options[i].value == type) {
            typeselect.selectedIndex = i;
            break;
          }
        }
        let editBtn = document.createElement("button")
        editBtn.innerText = "Edit";
        editBtn.addEventListener("click", updateQuest);
        let deleteBtn = document.createElement("button")
        deleteBtn.addEventListener("click", deleteQuest);
        deleteBtn.innerText = "X";
        quest.appendChild(select);
        quest.appendChild(typeselect)

        if (creation == "true") {
          quest.appendChild(editBtn);
          quest.appendChild(deleteBtn);
        }
        return quest;
      }
      const createField = (id, value) => {
        let field = document.createElement("div")
        field.classList.add("field");
        field.id = id;
        let input = document.createElement("input")
        input.value = value;
        let editBtn = document.createElement("button")
        editBtn.innerText = "Edit";
        editBtn.addEventListener("click", updateField);
        let deleteBtn = document.createElement("button")
        deleteBtn.addEventListener("click", deleteField);
        deleteBtn.innerText = "X";
        field.appendChild(input);

        if (creation == "true") {
          field.appendChild(editBtn);
          field.appendChild(deleteBtn);
        }
        return field;
      }
      const createPreviewElement = (questId, fieldText, submitType) => {
        return _createQuestHtml(questId, fieldText, submitType, true)
      }
      const getListOfQuests = () => new Promise((rs, rj) => {
        getAjax("/report/get/list/ReportFormQuest", (res) => { rs(JSON.parse(res)) })
      })
      const getListOfFields = () => new Promise((rs, rj) => {
        getAjax("/report/get/list/ReportFormField", (res) => { rs(JSON.parse(res)) })
      })

      let listOfFields = []
      let listOfQuests = []
      let addedQuests = []

      function updateForm() {
        const title = document.getElementById("formTitle").value;
        if (title == '') {
          alert("Title must not be empty.")
        }
        getAjax("/report/update/form/" + formId + "?quests=" + addedQuests.join(' ') + "&title=" + title, (res) => {
          const json = JSON.parse(res)
          if (json.result) {
            alert("Updated.")
          } else {
            alert("Failed to update.")
          }
        })
        //update form with addedQuests, formId
      }

      function clearPreview() {
        refreshPreviewContainer();
      }
      function createForm() {
        const title = document.getElementById("formTitle").value
        if (addedQuests.length == 0) return;
        if (title == "") { alert("Make name of this form."); return; }
        const str = addedQuests.join(' ')
        getAjax("/report/add/form?quests=" + str + "&title=" + title, (res) => {
          alert("Well created");
        })
      }

      function addQuestToPreview() {
        let preview = document.getElementById("preview")
        let selected = document.getElementById("questSelect")
        const id = selected.value;
        if (id == "") return;
        if (addedQuests.includes(id)) {
          alert("Already added element.")
          return;
        }
        const fieldText = selected.options[selected.selectedIndex].innerText;
        getAjax("/report/get/ReportFormQuest/" + id, (res) => {
          const json = JSON.parse(res).rows[0]
          const type = json.submitType;
          preview.appendChild(createPreviewElement(id, fieldText, type))
          addedQuests.push(id)
        })
      }

      function refreshPreviewContainer() {
        let preview = document.getElementById("preview")
        while (preview.firstChild) {
          preview.removeChild(preview.firstChild);
        }
        addedQuests = []
      }
      function refreshConstructContainer(refreshPreview = true) {
        let c = document.getElementById("quests");
        let qs = document.getElementById("questSelect");
        while (c.firstChild) {
          c.removeChild(c.firstChild);
        }
        getListOfQuests().then((list) => {
          listOfQuests = list.data;
          let opts = ""
          listOfQuests.forEach((q) => {
            if (q.fieldId == "") return;
            getAjax("/report/get/ReportFormField/" + q.fieldId, (res) => {
              let text = JSON.parse(res).rows[0]
              if (text != undefined) {
                text = text.field;
                opts += "<option value='" + q.id + "'>" + text + "</option>"
                c.appendChild(createQuest(q.id, text, q.submitType))
              }
              qs.innerHTML = opts;
            })
          });
        })
        if (refreshPreview)
          refreshPreviewContainer();
      }
      function refreshAddFieldContainer(relay = true) {
        let c = document.getElementById("fields");
        let selection = document.getElementById("fieldSelect");
        while (c.firstChild) {
          c.removeChild(c.firstChild);
        }
        while (selection.firstChild) {
          selection.removeChild(selection.firstChild)
        }
        getListOfFields().then((list) => {
          listOfFields = list.data
          let opts = "";
          listOfFields.forEach((field) => {
            c.appendChild(createField(field.id, field.field))
            opts += "<option value=" + field.id + ">" + field.field + "</option>"
          });
          selection.innerHTML = opts;
        })
        if (relay) refreshConstructContainer();
      }

      const prev = window.onload;
      window.onload = () => {
        if (prev) prev();
        refreshAddFieldContainer();

        if (creation == "false") {
          if (formId == '') {
            alert("System error. redirect to root");
            window.location.href = "/";
          }
          let quests = "<%= (typeof(quests) == 'undefined' ? '' : quests) %>";
          quests = quests.split(',')
          let preview = document.getElementById("preview")
          for (let i = 0; i < quests.length; i++) {
            getAjax("/report/get/ReportFormQuest/" + quests[i], (res) => {
              if (res != undefined) {
                const data = JSON.parse(res).rows[0];
                if (data != {}) {
                  getAjax("/report/get/ReportFormField/" + data.fieldId, (res) => {
                    const f = JSON.parse(res).rows[0].field;
                    preview.appendChild(createPreviewElement(data.id, f, data.submitType))
                    addedQuests.push(data.id)
                  })
                }
              }
            })
          }
        }
      } 
    </script>
</body>

</html>